CREATE DATABASE Music_Database;

USE  Music_Database;
-- QUERY 1) WHO IS THE SENIOR MOST EMPLOYEE BASED ON THE JOB TITLE?
SELECT * FROM EMPLOYEE
ORDER BY LEVELS DESC
LIMIT 1;
-- QUERY 2) WHICH COUNTRIES HAVE THE MOST INVOICES?
SELECT COUNT(*) AS C, billing_country
FROM INVOICE
GROUP BY billing_country
ORDER BY C DESC
LIMIT 5;
--  QUERY 3) WHAT ARE THE TOP 3 VALUES OF THE TOTAL INVOICE?
SELECT TOTAL FROM INVOICE
ORDER BY TOTAL DESC
LIMIT 3;
--  QUERY 4) WHICH CITY HAS THE BEST CUSTOMERS? WE WOULD LIKE TO THROW A A PROMOTIONAL MUSIC FESTIVAL IN 
-- IN THE CITY WE MAKE THE MOST MONEY. WROTE A QUERY THAT RETURNS ONE CITY THAT HAS THE HIGHEST SUM OF INVOICE TOTALS
-- RETURN BOTH THE CITY NAME AND SUM OF ALL INVOICE TOTALS
SELECT SUM(TOTAL) AS INVOICE_TOTAL, billing_city
FROM INVOICE
GROUP BY billing_city
ORDER BY INVOICE_TOTAL DESC;
-- QUERY 5) WHO IS THE BEST CUSTOMER? THE CUSTOMER WHO HAS THE MOST MONEY WILL BE DECLARED THE BEST CUSTOMER.
-- WRITE A QUERY THAT RETURNS THE PERSON WHO HAS SPENT THE MOST MONEY.
SELECT C.CUSTOMER_ID, C.first_name, C.last_name,
SUM(I.TOTAL)
  FROM CUSTOMER C
  JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
  GROUP BY C.CUSTOMER_ID, C.first_name, C.last_name
  ORDER BY 2 DESC
  LIMIT 1;
  -- set 2:1 WRITE A QUERY TO RETURN THE EMAIL, FIRST NAME, LAST NAME AND GENRE OF ALL 'ROCK' MUSIC LISTENERS
  -- RETURN YOUR LIST ORDERED ALPHABETICALLY BY EMAIL STARTING WITH LETTER A 
  SELECT DISTINCT EMAIL, FIRST_NAME, LAST_NAME
  FROM CUSTOMER
  JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
  JOIN INVOICE_LINE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID
  WHERE TRACK_ID IN(
  SELECT TRACK_ID FROM TRACK
  JOIN GENRE ON TRACK.GENRE_ID = GENRE.GENRE_ID
  WHERE GENRE.NAME LIKE 'ROCK'
  )
  ORDER BY EMAIL;
  
  -- SET :2:2 LETS INVITE THE ARTIST WHO HAVE WRITTEN THE MOST ROCK MUSIC IN OUR DATA SET. WRITE A QUERY THAT RETURNS
  -- ARTIST NAME AND TOTAL COUNT OF TOP 10 ROCK BAND
  SELECT AR.NAME,
  	COUNT(T.NAME)
  FROM TRACK T
  JOIN GENRE G ON T.GENRE_ID = G.GENRE_ID
  JOIN ALBUM2 AL ON AL.ALBUM_ID = T.ALBUM_ID
  JOIN ARTIST AR ON AR.ARTIST_ID = AL.ARTIST_ID
  WHERE G.NAME = 'Rock'
  GROUP BY 1
  ORDER BY 2 DESC
  LIMIT 10;
  -- 2:3 RETURN ALL THE TRACK NAMES THAT HAVE A SONG LENGTH LONGER THAN THE AVERAGE SONG LENGTH. RETURN THE NAME
  -- AND MILLISECONDS FOR EACH TRACK. ORDER BY THE SONG LENGTH WITH THE LONGEST SONGS LISTED FIRST.
SELECT name,milliseconds
FROM track
WHERE milliseconds > (
	SELECT AVG(milliseconds) AS avg_track_length
	FROM track )
ORDER BY milliseconds DESC;

-- 3:1 find how much amount spent by each customer on artist? write a query to return customer name, artist name & total spent
 SELECT 	Y.NAME AS ARTIST_NAME,
          SUM(TOTAL) AS GRAND_TOTAL
  FROM
          (SELECT		X.NAME,
                    X.UNIT_PRICE * X.QUANTITY AS TOTAL
           FROM
                   (SELECT   AR.NAME,
                             IL.UNIT_PRICE,
                             IL.QUANTITY
                    FROM ARTIST AR
                    JOIN ALBUM2 AL ON AR.ARTIST_ID = AL.ARTIST_ID
                    JOIN TRACK T ON AL.ALBUM_ID = T.ALBUM_ID
                    JOIN INVOICE_LINE IL ON T.TRACK_ID = IL.TRACK_ID
                    ORDER BY 1 DESC) AS X) AS Y
  GROUP BY 1
  ORDER BY 2 DESC
  LIMIT 1;
  
  SELECT C.CUSTOMER_ID,
		C.FIRST_NAME || ' ' || C.LAST_NAME AS CUSTOMER,
  	       AR.NAME AS ARTIST,
  	       SUM(IL.UNIT_PRICE) AS PRICE
  FROM CUSTOMER C
  JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
  JOIN INVOICE_LINE IL ON I.INVOICE_ID = IL.INVOICE_ID
  JOIN TRACK T ON IL.TRACK_ID = T.TRACK_ID
  JOIN ALBUM2 AL ON T.ALBUM_ID = AL.ALBUM_ID
  JOIN ARTIST AR ON AL.ARTIST_ID = AR.ARTIST_ID
  -- WHERE AR.NAME = 'Iron Maiden'
  GROUP BY 1,2,3
  ORDER BY 4 DESC
  LIMIT 5;
  
  -- 3:2 WE WANT TO FIND OUT THE MOST POPULAR MUSIC GENRE FOR EACH COUNTRY. 
  -- WE DETERMINE THE GENRE AS THE HIGHEST AMOUNT OF PURCHASES, WRITE A QUERY THAT RETURNS EACH COUNTRY WITH
  -- TOP MUSIC GENRE. FOR COUNTRIES WHERE THE MAXIMUM NUMBER OF PURCHASES IS SHARED RETURN ALL GENRES.
  WITH popular_genre AS 
(
    SELECT COUNT(invoice_line.quantity) AS purchases, customer.country, genre.name, genre.genre_id, 
	ROW_NUMBER() OVER(PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity) DESC) AS RowNo 
    FROM invoice_line 
	JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
	JOIN customer ON customer.customer_id = invoice.customer_id
	JOIN track ON track.track_id = invoice_line.track_id
	JOIN genre ON genre.genre_id = track.genre_id
	GROUP BY 2,3,4
	ORDER BY 2 ASC, 1 DESC
)
SELECT * FROM popular_genre WHERE RowNo <= 1;

-- 3:2 WRITE A QUERY THAT DETERMINES A CUSTOMER THAT HAS SPENT THE MOST ON MUSIC FOR EACH COUNTRY 
-- WRITE A QUERY THAT RETURNS THE COUNTRY ALONG WITH THE TOP CUSTOMER AND HOW MUCH THEY SPENT. FOR
-- COUNTRIES WHERE THE TOP AMOUNT SPENT IS SHARED, PROVIDE ALL CUSTOMERS WHO SPENT THIS AMOUNT
WITH Customter_with_country AS (
		SELECT customer.customer_id,first_name,last_name,billing_country,SUM(total) AS total_spending,
	    ROW_NUMBER() OVER(PARTITION BY billing_country ORDER BY SUM(total) DESC) AS RowNo 
		FROM invoice
		JOIN customer ON customer.customer_id = invoice.customer_id
		GROUP BY 1,2,3,4
		ORDER BY 4 ASC,5 DESC)
SELECT * FROM Customter_with_country WHERE RowNo <= 1;

/* Method 2: Using Recursive */

WITH RECURSIVE 
	customter_with_country AS (
		SELECT customer.customer_id,first_name,last_name,billing_country,SUM(total) AS total_spending
		FROM invoice
		JOIN customer ON customer.customer_id = invoice.customer_id
		GROUP BY 1,2,3,4
		ORDER BY 2,3 DESC),

	country_max_spending AS(
		SELECT billing_country,MAX(total_spending) AS max_spending
		FROM customter_with_country
		GROUP BY billing_country)

SELECT cc.billing_country, cc.total_spending, cc.first_name, cc.last_name, cc.customer_id
FROM customter_with_country cc
JOIN country_max_spending ms
ON cc.billing_country = ms.billing_country
WHERE cc.total_spending = ms.max_spending
ORDER BY 1;










  